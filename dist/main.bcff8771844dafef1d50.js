!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=115)}([function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n(74))},function(t,e,n){var r=n(0),o=n(29),i=n(2),c=n(32),u=n(33),a=n(44),s=o("wks"),f=r.Symbol,l=a?f:f&&f.withoutSetter||c;t.exports=function(t){return i(s,t)||(u&&i(f,t)?s[t]=f[t]:s[t]=l("Symbol."+t)),s[t]}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(6);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){var r=n(7),o=n(43),i=n(4),c=n(19),u=Object.defineProperty;e.f=r?u:function(t,e,n){if(i(t),e=c(e,!0),i(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(3);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(7),o=n(5),i=n(15);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(0),o=n(8),i=n(2),c=n(30),u=n(34),a=n(16),s=a.get,f=a.enforce,l=String(String).split("String");(t.exports=function(t,e,n,u){var a=!!u&&!!u.unsafe,s=!!u&&!!u.enumerable,p=!!u&&!!u.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),f(n).source=l.join("string"==typeof e?e:"")),t!==r?(a?!p&&t[e]&&(s=!0):delete t[e],s?t[e]=n:o(t,e,n)):s?t[e]=n:c(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||u(this)}))},function(t,e,n){var r=n(0),o=n(22).f,i=n(8),c=n(9),u=n(30),a=n(48),s=n(53);t.exports=function(t,e){var n,f,l,p,v,d=t.target,h=t.global,y=t.stat;if(n=h?r:y?r[d]||u(d,{}):(r[d]||{}).prototype)for(f in e){if(p=e[f],l=t.noTargetGet?(v=o(n,f))&&v.value:n[f],!s(h?f:d+(y?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;a(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),c(n,f,p,t)}}},function(t,e,n){var r=n(47),o=n(23);t.exports=function(t){return r(o(t))}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(49),o=n(0),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e){t.exports=!1},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r,o,i,c=n(75),u=n(0),a=n(6),s=n(8),f=n(2),l=n(20),p=n(21),v=u.WeakMap;if(c){var d=new v,h=d.get,y=d.has,m=d.set;r=function(t,e){return m.call(d,t,e),e},o=function(t){return h.call(d,t)||{}},i=function(t){return y.call(d,t)}}else{var g=l("state");p[g]=!0,r=function(t,e){return s(t,g,e),e},o=function(t){return f(t,g)?t[g]:{}},i=function(t){return f(t,g)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!a(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(36),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e){t.exports={}},function(t,e,n){var r=n(6);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(29),o=n(32),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e){t.exports={}},function(t,e,n){var r=n(7),o=n(46),i=n(15),c=n(11),u=n(19),a=n(2),s=n(43),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=c(t),e=u(e,!0),s)try{return f(t,e)}catch(t){}if(a(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(5).f,o=n(2),i=n(1)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,n){var r=n(25);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(23);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r={};r[n(1)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e,n){var r=n(14),o=n(42);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"Â© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(0),o=n(8);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(0),o=n(6),i=r.document,c=o(i)&&o(i.createElement);t.exports=function(t){return c?i.createElement(t):{}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(3);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r=n(42),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},function(t,e,n){var r=n(50),o=n(37).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(7),o=n(5).f,i=Function.prototype,c=i.toString,u=/^\s*function ([^ (]*)/;r&&!("name"in i)&&o(i,"name",{configurable:!0,get:function(){try{return c.call(this).match(u)[1]}catch(t){return""}}})},function(t,e,n){var r=n(12);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r,o=n(4),i=n(93),c=n(37),u=n(21),a=n(59),s=n(31),f=n(20),l=f("IE_PROTO"),p=function(){},v=function(t){return"<script>"+t+"<\/script>"},d=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;d=r?function(t){t.write(v("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=s("iframe")).style.display="none",a.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(v("document.F=Object")),t.close(),t.F);for(var n=c.length;n--;)delete d.prototype[c[n]];return d()};u[l]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(p.prototype=o(t),n=new p,p.prototype=null,n[l]=t):n=d(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(28),o=n(9),i=n(76);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,e,n){var r=n(0),o=n(30),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e,n){var r=n(7),o=n(3),i=n(31);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(33);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(28),o=n(12),i=n(1)("toStringTag"),c="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:c?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(3),o=n(12),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(2),o=n(78),i=n(22),c=n(5);t.exports=function(t,e){for(var n=o(e),u=c.f,a=i.f,s=0;s<n.length;s++){var f=n[s];r(t,f)||u(t,f,a(e,f))}}},function(t,e,n){var r=n(0);t.exports=r},function(t,e,n){var r=n(2),o=n(11),i=n(79).indexOf,c=n(21);t.exports=function(t,e){var n,u=o(t),a=0,s=[];for(n in u)!r(c,n)&&r(u,n)&&s.push(n);for(;e.length>a;)r(u,n=e[a++])&&(~i(s,n)||s.push(n));return s}},function(t,e,n){var r=n(36),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(3),o=/#|\.prototype\./,i=function(t,e){var n=u[c(t)];return n==s||n!=a&&("function"==typeof e?r(e):!!e)},c=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},u=i.data={},a=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},function(t,e,n){var r=n(1),o=n(18),i=r("iterator"),c=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||c[i]===t)}},function(t,e,n){var r=n(45),o=n(18),i=n(1)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(4);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(1)("iterator"),o=!1;try{var i=0,c={next:function(){return{done:!!i++}},return:function(){o=!0}};c[r]=function(){return this},Array.from(c,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,e,n){var r,o,i,c=n(0),u=n(3),a=n(12),s=n(26),f=n(59),l=n(31),p=n(60),v=c.location,d=c.setImmediate,h=c.clearImmediate,y=c.process,m=c.MessageChannel,g=c.Dispatch,b=0,S={},x=function(t){if(S.hasOwnProperty(t)){var e=S[t];delete S[t],e()}},w=function(t){return function(){x(t)}},_=function(t){x(t.data)},j=function(t){c.postMessage(t+"",v.protocol+"//"+v.host)};d&&h||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return S[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},h=function(t){delete S[t]},"process"==a(y)?r=function(t){y.nextTick(w(t))}:g&&g.now?r=function(t){g.now(w(t))}:m&&!p?(i=(o=new m).port2,o.port1.onmessage=_,r=s(i.postMessage,i,1)):!c.addEventListener||"function"!=typeof postMessage||c.importScripts||u(j)||"file:"===v.protocol?r="onreadystatechange"in l("script")?function(t){f.appendChild(l("script")).onreadystatechange=function(){f.removeChild(this),x(t)}}:function(t){setTimeout(w(t),0)}:(r=j,c.addEventListener("message",_,!1))),t.exports={set:d,clear:h}},function(t,e,n){var r=n(13);t.exports=r("document","documentElement")},function(t,e,n){var r=n(61);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){var r=n(13);t.exports=r("navigator","userAgent")||""},function(t,e,n){"use strict";var r=n(25),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},function(t,e,n){var r,o,i=n(0),c=n(61),u=i.process,a=u&&u.versions,s=a&&a.v8;s?o=(r=s.split("."))[0]+r[1]:c&&(!(r=c.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=c.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,e,n){"use strict";var r=n(10),o=n(90);r({target:"String",proto:!0,forced:n(91)("link")},{link:function(t){return o(this,"a","href",t)}})},function(t,e,n){var r=n(50),o=n(37);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(1);e.f=r},function(t,e,n){var r=n(49),o=n(2),i=n(66),c=n(5).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||c(e,t,{value:i.f(t)})}},function(t,e,n){"use strict";var r=n(19),o=n(5),i=n(15);t.exports=function(t,e,n){var c=r(e);c in t?o.f(t,c,i(0,n)):t[c]=n}},function(t,e,n){"use strict";var r=n(11),o=n(101),i=n(18),c=n(16),u=n(70),a=c.set,s=c.getterFor("Array Iterator");t.exports=u(Array,"Array",(function(t,e){a(this,{type:"Array Iterator",target:r(t),index:0,kind:e})}),(function(){var t=s(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,e,n){"use strict";var r=n(10),o=n(102),i=n(72),c=n(104),u=n(24),a=n(8),s=n(9),f=n(1),l=n(14),p=n(18),v=n(71),d=v.IteratorPrototype,h=v.BUGGY_SAFARI_ITERATORS,y=f("iterator"),m=function(){return this};t.exports=function(t,e,n,f,v,g,b){o(n,e,f);var S,x,w,_=function(t){if(t===v&&L)return L;if(!h&&t in k)return k[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},j=e+" Iterator",O=!1,k=t.prototype,E=k[y]||k["@@iterator"]||v&&k[v],L=!h&&E||_(v),A="Array"==e&&k.entries||E;if(A&&(S=i(A.call(new t)),d!==Object.prototype&&S.next&&(l||i(S)===d||(c?c(S,d):"function"!=typeof S[y]&&a(S,y,m)),u(S,j,!0,!0),l&&(p[j]=m))),"values"==v&&E&&"values"!==E.name&&(O=!0,L=function(){return E.call(this)}),l&&!b||k[y]===L||a(k,y,L),p[e]=L,v)if(x={values:_("values"),keys:g?L:_("keys"),entries:_("entries")},b)for(w in x)(h||O||!(w in k))&&s(k,w,x[w]);else r({target:e,proto:!0,forced:h||O},x);return x}},function(t,e,n){"use strict";var r,o,i,c=n(72),u=n(8),a=n(2),s=n(1),f=n(14),l=s("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=c(c(i)))!==Object.prototype&&(r=o):p=!0),null==r&&(r={}),f||a(r,l)||u(r,l,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},function(t,e,n){var r=n(2),o=n(27),i=n(20),c=n(103),u=i("IE_PROTO"),a=Object.prototype;t.exports=c?Object.getPrototypeOf:function(t){return t=o(t),r(t,u)?t[u]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(0),o=n(34),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e,n){"use strict";var r=n(28),o=n(45);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,n){"use strict";var r,o,i,c,u=n(10),a=n(14),s=n(0),f=n(13),l=n(80),p=n(9),v=n(81),d=n(24),h=n(82),y=n(6),m=n(25),g=n(83),b=n(12),S=n(34),x=n(84),w=n(57),_=n(85),j=n(58).set,O=n(86),k=n(87),E=n(88),L=n(62),A=n(89),P=n(16),T=n(53),C=n(1),I=n(63),M=C("species"),q="Promise",F=P.get,N=P.set,D=P.getterFor(q),R=l,U=s.TypeError,G=s.document,V=s.process,B=f("fetch"),z=L.f,H=z,W="process"==b(V),J=!!(G&&G.createEvent&&s.dispatchEvent),Y=T(q,(function(){if(!(S(R)!==String(R))){if(66===I)return!0;if(!W&&"function"!=typeof PromiseRejectionEvent)return!0}if(a&&!R.prototype.finally)return!0;if(I>=51&&/native code/.test(R))return!1;var t=R.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[M]=e,!(t.then((function(){}))instanceof e)})),$=Y||!w((function(t){R.all(t).catch((function(){}))})),K=function(t){var e;return!(!y(t)||"function"!=typeof(e=t.then))&&e},Q=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;O((function(){for(var o=e.value,i=1==e.state,c=0;r.length>c;){var u,a,s,f=r[c++],l=i?f.ok:f.fail,p=f.resolve,v=f.reject,d=f.domain;try{l?(i||(2===e.rejection&&et(t,e),e.rejection=1),!0===l?u=o:(d&&d.enter(),u=l(o),d&&(d.exit(),s=!0)),u===f.promise?v(U("Promise-chain cycle")):(a=K(u))?a.call(u,p,v):p(u)):v(o)}catch(t){d&&!s&&d.exit(),v(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&Z(t,e)}))}},X=function(t,e,n){var r,o;J?((r=G.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),s.dispatchEvent(r)):r={promise:e,reason:n},(o=s["on"+t])?o(r):"unhandledrejection"===t&&E("Unhandled promise rejection",n)},Z=function(t,e){j.call(s,(function(){var n,r=e.value;if(tt(e)&&(n=A((function(){W?V.emit("unhandledRejection",r,t):X("unhandledrejection",t,r)})),e.rejection=W||tt(e)?2:1,n.error))throw n.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){j.call(s,(function(){W?V.emit("rejectionHandled",t):X("rejectionhandled",t,e.value)}))},nt=function(t,e,n,r){return function(o){t(e,n,o,r)}},rt=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,Q(t,e,!0))},ot=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw U("Promise can't be resolved itself");var o=K(n);o?O((function(){var r={done:!1};try{o.call(n,nt(ot,t,r,e),nt(rt,t,r,e))}catch(n){rt(t,r,n,e)}})):(e.value=n,e.state=1,Q(t,e,!1))}catch(n){rt(t,{done:!1},n,e)}}};Y&&(R=function(t){g(this,R,q),m(t),r.call(this);var e=F(this);try{t(nt(ot,this,e),nt(rt,this,e))}catch(t){rt(this,e,t)}},(r=function(t){N(this,{type:q,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=v(R.prototype,{then:function(t,e){var n=D(this),r=z(_(this,R));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=W?V.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&Q(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=F(t);this.promise=t,this.resolve=nt(ot,t,e),this.reject=nt(rt,t,e)},L.f=z=function(t){return t===R||t===i?new o(t):H(t)},a||"function"!=typeof l||(c=l.prototype.then,p(l.prototype,"then",(function(t,e){var n=this;return new R((function(t,e){c.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof B&&u({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return k(R,B.apply(s,arguments))}}))),u({global:!0,wrap:!0,forced:Y},{Promise:R}),d(R,q,!1,!0),h(q),i=f(q),u({target:q,stat:!0,forced:Y},{reject:function(t){var e=z(this);return e.reject.call(void 0,t),e.promise}}),u({target:q,stat:!0,forced:a||Y},{resolve:function(t){return k(a&&this===i?R:this,t)}}),u({target:q,stat:!0,forced:$},{all:function(t){var e=this,n=z(e),r=n.resolve,o=n.reject,i=A((function(){var n=m(e.resolve),i=[],c=0,u=1;x(t,(function(t){var a=c++,s=!1;i.push(void 0),u++,n.call(e,t).then((function(t){s||(s=!0,i[a]=t,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=z(e),r=n.reject,o=A((function(){var o=m(e.resolve);x(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},function(t,e,n){var r=n(13),o=n(35),i=n(52),c=n(4);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(c(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(11),o=n(17),i=n(51),c=function(t){return function(e,n,c){var u,a=r(e),s=o(a.length),f=i(c,s);if(t&&n!=n){for(;s>f;)if((u=a[f++])!=u)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:c(!0),indexOf:c(!1)}},function(t,e,n){var r=n(0);t.exports=r.Promise},function(t,e,n){var r=n(9);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){"use strict";var r=n(13),o=n(5),i=n(1),c=n(7),u=i("species");t.exports=function(t){var e=r(t),n=o.f;c&&e&&!e[u]&&n(e,u,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(4),o=n(54),i=n(17),c=n(26),u=n(55),a=n(56),s=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,f,l){var p,v,d,h,y,m,g,b=c(e,n,f?2:1);if(l)p=t;else{if("function"!=typeof(v=u(t)))throw TypeError("Target is not iterable");if(o(v)){for(d=0,h=i(t.length);h>d;d++)if((y=f?b(r(g=t[d])[0],g[1]):b(t[d]))&&y instanceof s)return y;return new s(!1)}p=v.call(t)}for(m=p.next;!(g=m.call(p)).done;)if("object"==typeof(y=a(p,b,g.value,f))&&y&&y instanceof s)return y;return new s(!1)}).stop=function(t){return new s(!0,t)}},function(t,e,n){var r=n(4),o=n(25),i=n(1)("species");t.exports=function(t,e){var n,c=r(t).constructor;return void 0===c||null==(n=r(c)[i])?e:o(n)}},function(t,e,n){var r,o,i,c,u,a,s,f,l=n(0),p=n(22).f,v=n(12),d=n(58).set,h=n(60),y=l.MutationObserver||l.WebKitMutationObserver,m=l.process,g=l.Promise,b="process"==v(m),S=p(l,"queueMicrotask"),x=S&&S.value;x||(r=function(){var t,e;for(b&&(t=m.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?c():i=void 0,t}}i=void 0,t&&t.enter()},b?c=function(){m.nextTick(r)}:y&&!h?(u=!0,a=document.createTextNode(""),new y(r).observe(a,{characterData:!0}),c=function(){a.data=u=!u}):g&&g.resolve?(s=g.resolve(void 0),f=s.then,c=function(){f.call(s,r)}):c=function(){d.call(l,r)}),t.exports=x||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,c()),i=e}},function(t,e,n){var r=n(4),o=n(6),i=n(62);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(0);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){var r=n(23),o=/"/g;t.exports=function(t,e,n,i){var c=String(r(t)),u="<"+e;return""!==n&&(u+=" "+n+'="'+String(i).replace(o,"&quot;")+'"'),u+">"+c+"</"+e+">"}},function(t,e,n){var r=n(3);t.exports=function(t){return r((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},function(t,e,n){"use strict";var r=n(10),o=n(0),i=n(13),c=n(14),u=n(7),a=n(33),s=n(44),f=n(3),l=n(2),p=n(39),v=n(6),d=n(4),h=n(27),y=n(11),m=n(19),g=n(15),b=n(40),S=n(65),x=n(35),w=n(94),_=n(52),j=n(22),O=n(5),k=n(46),E=n(8),L=n(9),A=n(29),P=n(20),T=n(21),C=n(32),I=n(1),M=n(66),q=n(67),F=n(24),N=n(16),D=n(95).forEach,R=P("hidden"),U=I("toPrimitive"),G=N.set,V=N.getterFor("Symbol"),B=Object.prototype,z=o.Symbol,H=i("JSON","stringify"),W=j.f,J=O.f,Y=w.f,$=k.f,K=A("symbols"),Q=A("op-symbols"),X=A("string-to-symbol-registry"),Z=A("symbol-to-string-registry"),tt=A("wks"),et=o.QObject,nt=!et||!et.prototype||!et.prototype.findChild,rt=u&&f((function(){return 7!=b(J({},"a",{get:function(){return J(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=W(B,e);r&&delete B[e],J(t,e,n),r&&t!==B&&J(B,e,r)}:J,ot=function(t,e){var n=K[t]=b(z.prototype);return G(n,{type:"Symbol",tag:t,description:e}),u||(n.description=e),n},it=s?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof z},ct=function(t,e,n){t===B&&ct(Q,e,n),d(t);var r=m(e,!0);return d(n),l(K,r)?(n.enumerable?(l(t,R)&&t[R][r]&&(t[R][r]=!1),n=b(n,{enumerable:g(0,!1)})):(l(t,R)||J(t,R,g(1,{})),t[R][r]=!0),rt(t,r,n)):J(t,r,n)},ut=function(t,e){d(t);var n=y(e),r=S(n).concat(lt(n));return D(r,(function(e){u&&!at.call(n,e)||ct(t,e,n[e])})),t},at=function(t){var e=m(t,!0),n=$.call(this,e);return!(this===B&&l(K,e)&&!l(Q,e))&&(!(n||!l(this,e)||!l(K,e)||l(this,R)&&this[R][e])||n)},st=function(t,e){var n=y(t),r=m(e,!0);if(n!==B||!l(K,r)||l(Q,r)){var o=W(n,r);return!o||!l(K,r)||l(n,R)&&n[R][r]||(o.enumerable=!0),o}},ft=function(t){var e=Y(y(t)),n=[];return D(e,(function(t){l(K,t)||l(T,t)||n.push(t)})),n},lt=function(t){var e=t===B,n=Y(e?Q:y(t)),r=[];return D(n,(function(t){!l(K,t)||e&&!l(B,t)||r.push(K[t])})),r};(a||(L((z=function(){if(this instanceof z)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=C(t),n=function(t){this===B&&n.call(Q,t),l(this,R)&&l(this[R],e)&&(this[R][e]=!1),rt(this,e,g(1,t))};return u&&nt&&rt(B,e,{configurable:!0,set:n}),ot(e,t)}).prototype,"toString",(function(){return V(this).tag})),L(z,"withoutSetter",(function(t){return ot(C(t),t)})),k.f=at,O.f=ct,j.f=st,x.f=w.f=ft,_.f=lt,M.f=function(t){return ot(I(t),t)},u&&(J(z.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),c||L(B,"propertyIsEnumerable",at,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!a,sham:!a},{Symbol:z}),D(S(tt),(function(t){q(t)})),r({target:"Symbol",stat:!0,forced:!a},{for:function(t){var e=String(t);if(l(X,e))return X[e];var n=z(e);return X[e]=n,Z[n]=e,n},keyFor:function(t){if(!it(t))throw TypeError(t+" is not a symbol");if(l(Z,t))return Z[t]},useSetter:function(){nt=!0},useSimple:function(){nt=!1}}),r({target:"Object",stat:!0,forced:!a,sham:!u},{create:function(t,e){return void 0===e?b(t):ut(b(t),e)},defineProperty:ct,defineProperties:ut,getOwnPropertyDescriptor:st}),r({target:"Object",stat:!0,forced:!a},{getOwnPropertyNames:ft,getOwnPropertySymbols:lt}),r({target:"Object",stat:!0,forced:f((function(){_.f(1)}))},{getOwnPropertySymbols:function(t){return _.f(h(t))}}),H)&&r({target:"JSON",stat:!0,forced:!a||f((function(){var t=z();return"[null]"!=H([t])||"{}"!=H({a:t})||"{}"!=H(Object(t))}))},{stringify:function(t,e,n){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=e,(v(e)||void 0!==t)&&!it(t))return p(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!it(e))return e}),o[1]=e,H.apply(null,o)}});z.prototype[U]||E(z.prototype,U,z.prototype.valueOf),F(z,"Symbol"),T[R]=!0},function(t,e,n){var r=n(7),o=n(5),i=n(4),c=n(65);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=c(e),u=r.length,a=0;u>a;)o.f(t,n=r[a++],e[n]);return t}},function(t,e,n){var r=n(11),o=n(35).f,i={}.toString,c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return c&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return c.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(26),o=n(47),i=n(27),c=n(17),u=n(96),a=[].push,s=function(t){var e=1==t,n=2==t,s=3==t,f=4==t,l=6==t,p=5==t||l;return function(v,d,h,y){for(var m,g,b=i(v),S=o(b),x=r(d,h,3),w=c(S.length),_=0,j=y||u,O=e?j(v,w):n?j(v,0):void 0;w>_;_++)if((p||_ in S)&&(g=x(m=S[_],_,b),t))if(e)O[_]=g;else if(g)switch(t){case 3:return!0;case 5:return m;case 6:return _;case 2:a.call(O,m)}else if(f)return!1;return l?-1:s||f?f:O}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},function(t,e,n){var r=n(6),o=n(39),i=n(1)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){"use strict";var r=n(10),o=n(7),i=n(0),c=n(2),u=n(6),a=n(5).f,s=n(48),f=i.Symbol;if(o&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new f(t):void 0===t?f():f(t);return""===t&&(l[e]=!0),e};s(p,f);var v=p.prototype=f.prototype;v.constructor=p;var d=v.toString,h="Symbol(test)"==String(f("test")),y=/^Symbol\((.*)\)[^)]+$/;a(v,"description",{configurable:!0,get:function(){var t=u(this)?this.valueOf():this,e=d.call(t);if(c(l,t))return"";var n=h?e.slice(7,-1):e.replace(y,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:p})}},function(t,e,n){n(67)("iterator")},function(t,e,n){var r=n(10),o=n(100);r({target:"Array",stat:!0,forced:!n(57)((function(t){Array.from(t)}))},{from:o})},function(t,e,n){"use strict";var r=n(26),o=n(27),i=n(56),c=n(54),u=n(17),a=n(68),s=n(55);t.exports=function(t){var e,n,f,l,p,v,d=o(t),h="function"==typeof this?this:Array,y=arguments.length,m=y>1?arguments[1]:void 0,g=void 0!==m,b=s(d),S=0;if(g&&(m=r(m,y>2?arguments[2]:void 0,2)),null==b||h==Array&&c(b))for(n=new h(e=u(d.length));e>S;S++)v=g?m(d[S],S):d[S],a(n,S,v);else for(p=(l=b.call(d)).next,n=new h;!(f=p.call(l)).done;S++)v=g?i(l,m,[f.value,S],!0):f.value,a(n,S,v);return n.length=S,n}},function(t,e,n){var r=n(1),o=n(40),i=n(5),c=r("unscopables"),u=Array.prototype;null==u[c]&&i.f(u,c,{configurable:!0,value:o(null)}),t.exports=function(t){u[c][t]=!0}},function(t,e,n){"use strict";var r=n(71).IteratorPrototype,o=n(40),i=n(15),c=n(24),u=n(18),a=function(){return this};t.exports=function(t,e,n){var s=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),c(t,s,!1,!0),u[s]=a,t}},function(t,e,n){var r=n(3);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(4),o=n(105);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,e,n){var r=n(6);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){"use strict";var r=n(10),o=n(6),i=n(39),c=n(51),u=n(17),a=n(11),s=n(68),f=n(1),l=n(107),p=n(108),v=l("slice"),d=p("slice",{ACCESSORS:!0,0:0,1:2}),h=f("species"),y=[].slice,m=Math.max;r({target:"Array",proto:!0,forced:!v||!d},{slice:function(t,e){var n,r,f,l=a(this),p=u(l.length),v=c(t,p),d=c(void 0===e?p:e,p);if(i(l)&&("function"!=typeof(n=l.constructor)||n!==Array&&!i(n.prototype)?o(n)&&null===(n=n[h])&&(n=void 0):n=void 0,n===Array||void 0===n))return y.call(l,v,d);for(r=new(void 0===n?Array:n)(m(d-v,0)),f=0;v<d;v++,f++)v in l&&s(r,f,l[v]);return r.length=f,r}})},function(t,e,n){var r=n(3),o=n(1),i=n(63),c=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[c]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){var r=n(7),o=n(3),i=n(2),c=Object.defineProperty,u={},a=function(t){throw t};t.exports=function(t,e){if(i(u,t))return u[t];e||(e={});var n=[][t],s=!!i(e,"ACCESSORS")&&e.ACCESSORS,f=i(e,0)?e[0]:a,l=i(e,1)?e[1]:void 0;return u[t]=!!n&&!o((function(){if(s&&!r)return!0;var t={length:-1};s?c(t,1,{enumerable:!0,get:a}):t[1]=1,n.call(t,f,l)}))}},function(t,e,n){"use strict";var r=n(9),o=n(4),i=n(3),c=n(110),u=RegExp.prototype,a=u.toString,s=i((function(){return"/a/b"!=a.call({source:"a",flags:"b"})})),f="toString"!=a.name;(s||f)&&r(RegExp.prototype,"toString",(function(){var t=o(this),e=String(t.source),n=t.flags;return"/"+e+"/"+String(void 0===n&&t instanceof RegExp&&!("flags"in u)?c.call(t):n)}),{unsafe:!0})},function(t,e,n){"use strict";var r=n(4);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){"use strict";var r=n(112).charAt,o=n(16),i=n(70),c=o.set,u=o.getterFor("String Iterator");i(String,"String",(function(t){c(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=u(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(36),o=n(23),i=function(t){return function(e,n){var i,c,u=String(o(e)),a=r(n),s=u.length;return a<0||a>=s?t?"":void 0:(i=u.charCodeAt(a))<55296||i>56319||a+1===s||(c=u.charCodeAt(a+1))<56320||c>57343?t?u.charAt(a):i:t?u.slice(a,a+2):c-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,e,n){var r=n(0),o=n(114),i=n(69),c=n(8),u=n(1),a=u("iterator"),s=u("toStringTag"),f=i.values;for(var l in o){var p=r[l],v=p&&p.prototype;if(v){if(v[a]!==f)try{c(v,a,f)}catch(t){v[a]=f}if(v[s]||c(v,s,l),o[l])for(var d in i)if(v[d]!==i[d])try{c(v,d,i[d])}catch(t){v[d]=i[d]}}}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){"use strict";n.r(e);n(73),n(41),n(77);function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(e){var n=e.baseUrl,r=e.headers;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.baseUrl=n,this.headers=r}var e,n,o;return e=t,(n=[{key:"getInitialCards",value:function(){return fetch(this.baseUrl+"/cards",{method:"GET",headers:this.headers}).then((function(t){return t.ok?t.json():Promise.reject("ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ Ð´Ð°Ð½Ð½ÑÐµ. ÐÑÐ¸Ð±ÐºÐ°:".concat(t.status))}))}},{key:"getUserInfoFromServer",value:function(){return fetch(this.baseUrl+"/users/me",{method:"GET",headers:this.headers}).then((function(t){return t.ok?t.json():Promise.reject("ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ Ð´Ð°Ð½Ð½ÑÐµ. ÐÑÐ¸Ð±ÐºÐ°:".concat(t.status))})).catch((function(t){throw t}))}},{key:"updateUserInfoApi",value:function(t,e,n){return fetch(this.baseUrl+"/users/me",{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:e,avatar:n})}).then((function(t){return t.ok?t.json():Promise.reject("ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ Ð´Ð°Ð½Ð½ÑÐµ. ÐÑÐ¸Ð±ÐºÐ°:".concat(t.status))})).catch((function(t){throw t}))}}])&&r(e.prototype,n),o&&r(e,o),t}();n(38),n(64);function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var c=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.link=e,this.name=n}var e,n,r;return e=t,(n=[{key:"like",value:function(t){t.target.classList.contains("place-card__like-icon")&&t.target.classList.toggle("place-card__like-icon_liked")}},{key:"remove",value:function(t){if(t.target.closest(".place-card__delete-icon")){var e=t.target.closest(".place-card");document.querySelector(".places-list").removeChild(e)}}},{key:"create",value:function(t,e){var n=document.createElement("div"),r=document.createElement("div"),o=document.createElement("button"),i=document.createElement("div"),c=document.createElement("h3"),u=document.createElement("button");return n.classList.add("place-card"),r.classList.add("place-card__image"),r.style.backgroundImage="url("+t+")",o.classList.add("place-card__delete-icon"),i.classList.add("place-card__description"),c.classList.add("place-card__name"),c.textContent=e,u.classList.add("place-card__like-icon"),document.querySelector(".places-list").appendChild(n),n.appendChild(r),n.appendChild(i),r.appendChild(o),i.appendChild(c),i.appendChild(u),n.addEventListener("click",this.openImage.bind(this)),n}},{key:"openImage",value:function(t){if(t.target.classList.contains("place-card__image")){var e=t.target.getAttribute("style");document.querySelector(".popup__photo").classList.add("popup_is-opened"),document.querySelector(".popup__content-photo").setAttribute("style",e)}}},{key:"closeImage",value:function(){document.querySelector(".popup__photo").classList.remove("popup_is-opened"),document.querySelector(".popup__content-photo").removeAttribute("style",this.imagePath)}}])&&i(e.prototype,n),r&&i(e,r),t}();n(92),n(97),n(98),n(99),n(69),n(106),n(109),n(111),n(113);function u(t){if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(t=function(t,e){if(!t)return;if("string"==typeof t)return a(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(t,e)}(t))){var e=0,n=function(){};return{s:n,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,o,i=!0,c=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return i=t.done,t},e:function(t){c=!0,o=t},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw o}}}}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var f=function(){function t(e,n,r,o,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.container=e,this.card=n,this.addForm=r,this.api=o,this.userInfo=i}var e,n,r;return e=t,(n=[{key:"addCard",value:function(){event.preventDefault();var t=this.addForm.elements.link.value,e=this.addForm.elements.name.value;this.cardElement=this.card.create(t,e)}},{key:"render",value:function(t){var e,n=u(t);try{for(n.s();!(e=n.n()).done;){var r=e.value;this.data=t;var o=r.name,i=r.link;this.card.create(i,o)}}catch(t){n.e(t)}finally{n.f()}}}])&&s(e.prototype,n),r&&s(e,r),t}();function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var p=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.popup=e}var e,n,r;return e=t,(n=[{key:"checkInputValidity",value:function(t,e){return t.validity.tooShort?e.textContent="ÐÐ¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¾Ñ 2 Ð´Ð¾ 30 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²":t.validity.valueMissing?e.textContent="Ð­ÑÐ¾ Ð¾Ð±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾Ðµ Ð¿Ð¾Ð»Ðµ":void(e.textContent="")}},{key:"setSubmitButtonState",value:function(t,e){return t.checkValidity()?e.removeAttribute("disabled",!0):e.setAttribute("disabled",!0)}},{key:"setEventListeners",value:function(){var t=this;this.form=this.popup.querySelector(".popup__form"),this.button=this.form.querySelector(".popup__button"),this.form.addEventListener("input",(function(e){t.checkInputValidity(e.target,e.target.closest("div").querySelector(".error-message")),t.setSubmitButtonState(t.form,t.button)})),this.setSubmitButtonState(this.form,this.button)}}])&&l(e.prototype,n),r&&l(e,r),t}();function v(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var d=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.popup=e}var e,n,r;return e=t,(n=[{key:"open",value:function(){this.popup.classList.add("popup_is-opened")}},{key:"close",value:function(){this.popup.classList.remove("popup_is-opened")}}])&&v(e.prototype,n),r&&v(e,r),t}();function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var y=function(){function t(e,n,r,o,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.form=e,this.userName=n,this.userData=r,this.avatar=o,this.api=i}var e,n,r;return e=t,(n=[{key:"userInfoLoad",value:function(){var t=this;this.api.getUserInfoFromServer().then((function(e){t.userName.textContent=e.name,t.userData.textContent=e.about,t.avatar.style.backgroundImage="url(".concat(e.avatar,")")})).catch((function(t){console.log("ÐÑÐ¸Ð±ÐºÐ° Ð² userInfoLoad: ".concat(t))}))}},{key:"setUserInfo",value:function(){this.form.userName.value=this.userName.textContent,this.form.userData.value=this.userData.textContent}},{key:"updateUserInfo",value:function(t){this.userName.textContent=t.name,this.userData.textContent=t.about}}])&&h(e.prototype,n),r&&h(e,r),t}(),m=document.querySelector(".places-list"),g=document.querySelector(".user-info__button"),b=document.querySelector(".user-info__button_edit"),S=document.querySelector(".popup__close"),x=document.querySelector(".popup__close_edit"),w=document.forms.new,_=document.forms.edit,j=document.querySelector(".popup__close_photo"),O=new c,k=new c(document.querySelector(".popup__close_photo")),E=new d(document.querySelector(".popup")),L=new d(document.querySelector(".popup__edit-profile")),A=new p(document.querySelector(".popup__edit-profile")),P=new p(document.querySelector(".popup__edit-card")),T=new o({baseUrl:"https://praktikum.tk/cohort9",headers:{authorization:"1c40e787-d2f1-4812-aa9b-77e6ef33e269","Content-Type":"application/json"}}),C=new y(_,document.querySelector(".user-info__name"),document.querySelector(".user-info__job"),document.querySelector(".user-info__photo"),T),I=new f(m,O,w,T,C);window.onload=function(){C.userInfoLoad(this.userName,this.userData,this.avatar),A.setEventListeners(),P.setEventListeners()},T.getInitialCards().then((function(t){return I.render(t)})).catch((function(t){console.log("ÐÑÐ¸Ð±ÐºÐ°: ".concat(t))})),m.addEventListener("click",O.like),m.addEventListener("click",O.remove),document.forms.new.addEventListener("submit",(function(t){t.preventDefault(t),I.addCard(t),E.close(E),t.target.reset()})),g.addEventListener("click",(function(){E.open()})),S.addEventListener("click",(function(){E.close()})),b.addEventListener("click",(function(){L.open(),C.setUserInfo()})),x.addEventListener("click",(function(){L.close()})),j.addEventListener("click",(function(){k.closeImage()})),document.querySelector(".popup").addEventListener("submit",(function(t){"submit"!==t.type&&"Escape"!==t.key||E.close()})),document.querySelector("#edit_form").addEventListener("submit",(function(t){t.preventDefault(t);var e=t.target.querySelector("#nameValidation").value,n=t.target.querySelector(".popup__input_type_data").value;T.updateUserInfoApi(e,n).then((function(t){C.updateUserInfo(t),L.close(L)})).catch((function(t){console.log("ÐÑÐ¸Ð±ÐºÐ°: ".concat(t))}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQVBJLmpzIiwid2VicGFjazovLy8uL3NyYy9DYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9DYXJkTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXJJbmZvLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIml0IiwiTWF0aCIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJGdW5jdGlvbiIsInNoYXJlZCIsImhhcyIsInVpZCIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJleGVjIiwiZXJyb3IiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIkRFU0NSSVBUT1JTIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJmIiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwiZmFpbHMiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInNldEdsb2JhbCIsImluc3BlY3RTb3VyY2UiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwic3BsaXQiLCJvcHRpb25zIiwidW5zYWZlIiwic2ltcGxlIiwibm9UYXJnZXRHZXQiLCJzb3VyY2UiLCJqb2luIiwidGhpcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInJlZGVmaW5lIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwidGFyZ2V0IiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0IiwiZm9yY2VkIiwidW5kZWZpbmVkIiwic2hhbSIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwidG9TdHJpbmciLCJzbGljZSIsInBhdGgiLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic2V0IiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwic2hhcmVkS2V5IiwiaGlkZGVuS2V5cyIsIldlYWtNYXAiLCJzdG9yZSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJnZXR0ZXJGb3IiLCJUWVBFIiwic3RhdGUiLCJ0eXBlIiwidG9JbnRlZ2VyIiwibWluIiwiYXJndW1lbnQiLCJpbnB1dCIsIlBSRUZFUlJFRF9TVFJJTkciLCJmbiIsInZhbCIsInZhbHVlT2YiLCJrZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJUT19TVFJJTkdfVEFHIiwid2VsbEtub3duU3ltYm9sIiwiVEFHIiwidGhhdCIsImEiLCJiIiwiYXBwbHkiLCJ0ZXN0IiwiSVNfUFVSRSIsInB1c2giLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwiZG9jdW1lbnQiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZnVuY3Rpb25Ub1N0cmluZyIsImludGVybmFsT2JqZWN0S2V5cyIsImNvbmNhdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsIm1hdGNoIiwiY2xhc3NvZiIsIkFycmF5IiwiaXNBcnJheSIsImFyZyIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3QiLCJkb21haW4iLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiRiIsIlByb3BlcnRpZXMiLCJyZXN1bHQiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJpdGVyYXRvciIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIjEiLCJWIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImluZGV4T2YiLCJuYW1lcyIsIm1heCIsImluZGV4IiwiaW50ZWdlciIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsIkl0ZXJhdG9ycyIsIklURVJBVE9SIiwiQXJyYXlQcm90b3R5cGUiLCJFTlRSSUVTIiwicmV0dXJuTWV0aG9kIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwibmV4dCIsImRvbmUiLCJmcm9tIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiSVNfSU9TIiwibG9jYXRpb24iLCJzZXRJbW1lZGlhdGUiLCJjbGVhciIsImNsZWFySW1tZWRpYXRlIiwicHJvY2VzcyIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJydW5uZXIiLCJsaXN0ZW5lciIsImV2ZW50IiwicG9zdCIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJob3N0IiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiZ2V0QnVpbHRJbiIsInVzZXJBZ2VudCIsIlByb21pc2VDYXBhYmlsaXR5IiwiQyIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJ2ZXJzaW9ucyIsInY4IiwiJCIsImNyZWF0ZUhUTUwiLCJwcm90byIsImZvcmNlZFN0cmluZ0hUTUxNZXRob2QiLCJsaW5rIiwidXJsIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsIk5BTUUiLCJwcm9wZXJ0eUtleSIsImFkZFRvVW5zY29wYWJsZXMiLCJkZWZpbmVJdGVyYXRvciIsInNldEludGVybmFsU3RhdGUiLCJpdGVyYXRlZCIsImtpbmQiLCJBcmd1bWVudHMiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsInNldFRvU3RyaW5nVGFnIiwiSXRlcmF0b3JzQ29yZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsIktFWSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJlbnRyaWVzIiwidmFsdWVzIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsInRvT2JqZWN0IiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiT2JqZWN0UHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJnIiwiZSIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJOYXRpdmVQcm9taXNlIiwicmVkZWZpbmVBbGwiLCJzZXRTcGVjaWVzIiwiYW5JbnN0YW5jZSIsIml0ZXJhdGUiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJ0YXNrIiwibWljcm90YXNrIiwicHJvbWlzZVJlc29sdmUiLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJQUk9NSVNFIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCIkZmV0Y2giLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIklTX05PREUiLCJESVNQQVRDSF9FVkVOVCIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIkZha2VQcm9taXNlIiwidGhlbiIsIklOQ09SUkVDVF9JVEVSQVRJT04iLCJpdGVyYWJsZSIsImFsbCIsImlzVGhlbmFibGUiLCJub3RpZnkiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwiY2hhaW4iLCJyZWFjdGlvbnMiLCJvayIsImV4aXRlZCIsInJlYWN0aW9uIiwiaGFuZGxlciIsImZhaWwiLCJyZWplY3Rpb24iLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwicmVhc29uIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJlbWl0IiwicGFyZW50IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJmZXRjaCIsIndyYXAiLCJQcm9taXNlIiwiY2FwYWJpbGl0eSIsIngiLCIkcHJvbWlzZVJlc29sdmUiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkNvbnN0cnVjdG9yIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiUmVzdWx0Iiwic3RvcHBlZCIsIkFTX0VOVFJJRVMiLCJJU19JVEVSQVRPUiIsIml0ZXJGbiIsInN0ZXAiLCJib3VuZEZ1bmN0aW9uIiwic3RvcCIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIlMiLCJmbHVzaCIsImhlYWQiLCJsYXN0IiwidG9nZ2xlIiwibm9kZSIsIm1hY3JvdGFzayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicHJvbWlzZUNhcGFiaWxpdHkiLCJjb25zb2xlIiwicXVvdCIsImF0dHJpYnV0ZSIsInAxIiwiTUVUSE9EX05BTUUiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJvYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiJGZvckVhY2giLCJmb3JFYWNoIiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiJFN5bWJvbCIsIiRzdHJpbmdpZnkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIlFPYmplY3QiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJkZXNjcmlwdGlvbiIsInN5bWJvbCIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJzZXR0ZXIiLCJrZXlGb3IiLCJzeW0iLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJzdHJpbmdpZnkiLCJyZXBsYWNlciIsInNwYWNlIiwiJHJlcGxhY2VyIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImFycmF5U3BlY2llc0NyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsImNhbGxiYWNrZm4iLCJzcGVjaWZpY0NyZWF0ZSIsIm1hcCIsImZpbHRlciIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaW5kSW5kZXgiLCJvcmlnaW5hbEFycmF5IiwiTmF0aXZlU3ltYm9sIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInN5bWJvbFByb3RvdHlwZSIsInN5bWJvbFRvU3RyaW5nIiwibmF0aXZlIiwicmVnZXhwIiwiZGVzYyIsImNyZWF0ZVByb3BlcnR5IiwiYXJyYXlMaWtlIiwiYXJndW1lbnRzTGVuZ3RoIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlcmF0b3JNZXRob2QiLCJVTlNDT1BBQkxFUyIsImFQb3NzaWJsZVByb3RvdHlwZSIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsImFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsIlVTRVNfVE9fTEVOR1RIIiwiQUNDRVNTT1JTIiwiMCIsIm5hdGl2ZVNsaWNlIiwic3RhcnQiLCJlbmQiLCJrIiwiZmluIiwiYXJyYXkiLCJmb28iLCJCb29sZWFuIiwiY2FjaGUiLCJ0aHJvd2VyIiwiYXJndW1lbnQwIiwiYXJndW1lbnQxIiwiZmxhZ3MiLCJSZWdFeHBQcm90b3R5cGUiLCJSZWdFeHAiLCJuYXRpdmVUb1N0cmluZyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJSIiwicmYiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwiZG90QWxsIiwidW5pY29kZSIsInN0aWNreSIsImNoYXJBdCIsInBvaW50IiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsInBvc2l0aW9uIiwic2l6ZSIsImNoYXJDb2RlQXQiLCJjb2RlQXQiLCJET01JdGVyYWJsZXMiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIkFycmF5VmFsdWVzIiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsIkFwaSIsImJhc2VVcmwiLCJoZWFkZXJzIiwicmVzIiwianNvbiIsInN0YXR1cyIsImNhdGNoIiwiZXJyIiwiYWJvdXQiLCJhdmF0YXIiLCJib2R5IiwiSlNPTiIsIkNhcmQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImNsb3Nlc3QiLCJjYXJkRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJsaW5rVmFsdWUiLCJuYW1lVmFsdWUiLCJpbWFnZUVsZW1lbnQiLCJkZWxldGVJY29uRWxlbWVudCIsImRlc2NyaXB0aW9uRWxlbWVudCIsIm5hbWVFbGVtZW50IiwibGlrZUljb25FbGVtZW50IiwiYWRkIiwiYmFja2dyb3VuZEltYWdlIiwidGV4dENvbnRlbnQiLCJvcGVuSW1hZ2UiLCJpbWFnZVBhdGgiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJDYXJkTGlzdCIsImNvbnRhaW5lciIsImNhcmQiLCJhZGRGb3JtIiwiYXBpIiwidXNlckluZm8iLCJwcmV2ZW50RGVmYXVsdCIsImVsZW1lbnRzIiwiRm9ybVZhbGlkYXRvciIsInBvcHVwIiwiZXJyb3JNZXNzYWdlIiwidmFsaWRpdHkiLCJ0b29TaG9ydCIsInZhbHVlTWlzc2luZyIsImZvcm0iLCJidXR0b24iLCJjaGVja1ZhbGlkaXR5IiwiY2hlY2tJbnB1dFZhbGlkaXR5Iiwic2V0U3VibWl0QnV0dG9uU3RhdGUiLCJQb3B1cCIsIlVzZXJJbmZvIiwidXNlck5hbWUiLCJ1c2VyRGF0YSIsImdldFVzZXJJbmZvRnJvbVNlcnZlciIsImxvZyIsInBsYWNlc0xpc3QiLCJvcGVuQnV0dG9uIiwiZWRpdEJ1dHRvbiIsImNsb3NlQnV0dG9uIiwiY2xvc2VCdXR0b25FZGl0IiwiZm9ybXMiLCJuZXciLCJlZGl0Rm9ybSIsImVkaXQiLCJwb3B1cENsb3NlUGhvdG8iLCJjYXJkQ2xvc2VJbWFnZSIsInBvcHVwTmV3UGxhY2UiLCJwb3B1cEVkaXRQcm9maWxlIiwiZm9ybVZhbGlkYXRvciIsImZvcm1WYWxpZGF0b3JDYXJkIiwiYXV0aG9yaXphdGlvbiIsImNhcmRMaXN0Iiwib25sb2FkIiwidXNlckluZm9Mb2FkIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJnZXRJbml0aWFsQ2FyZHMiLCJyZW5kZXIiLCJsaWtlIiwiYWRkQ2FyZCIsInJlc2V0Iiwic2V0VXNlckluZm8iLCJjbG9zZUltYWdlIiwidXBkYXRlVXNlckluZm9BcGkiLCJ1cGRhdGVVc2VySW5mbyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVa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LEVBQWlCN2QsT0FDakI2YixFQUFTNkMsaUJBR1hyQixFQUFnQjVZLGlCQUFpQixTQUFTLFdBQ3hDb1osRUFBaUJ0ZSxXQUduQm1lLEVBQWdCalosaUJBQWlCLFNBQVMsV0FDeENrWixFQUFlZ0IsZ0JBR2pCMWhCLFNBQVNzZCxjQUFjLFVBQVU5VixpQkFBaUIsVUFBVSxTQUFVWCxHQUNqRCxXQUFmQSxFQUFNdEksTUFBbUMsV0FBZHNJLEVBQU01TyxLQUNuQzBvQixFQUFjcmUsV0FJbEJ0QyxTQUFTc2QsY0FBYyxjQUFjOVYsaUJBQWlCLFVBQVUsU0FBQ1gsR0FDL0RBLEVBQU1nWSxlQUFlaFksR0FDckIsSUFBTStZLEVBQVcvWSxFQUFNOUssT0FBT3VoQixjQUFjLG1CQUFtQjNsQixNQUN6RGtvQixFQUFXaFosRUFBTTlLLE9BQU91aEIsY0FBYywyQkFBMkIzbEIsTUFDdkVnbkIsRUFBSWdELGtCQUFrQi9CLEVBQVVDLEdBQzdCdlMsTUFBSyxTQUFBN0ksR0FDSm1hLEVBQVNnRCxlQUFlbmQsR0FDeEJtYyxFQUFpQnRlLE1BQU1zZSxNQUV4QmpFLE9BQU0sU0FBQUMsR0FDTHRLLFFBQVF5TixJQUFSLGtCQUF1Qm5EIiwiZmlsZSI6Im1haW4uYmNmZjg3NzE4NDRkYWZlZjFkNTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTE1KTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIGVsc2UgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pXG4gICAgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuNi41JyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIwIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gIVN0cmluZyhTeW1ib2woKSk7XG59KTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhKE5BTUUgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcuY2FsbCh0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgIVN5bWJvbC5zaGFtXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcblxudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmXG4gICAgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmXG4gICAgIWZhaWxzKHBvc3QpICYmXG4gICAgbG9jYXRpb24ucHJvdG9jb2wgIT09ICdmaWxlOidcbiAgKSB7XG4gICAgZGVmZXIgPSBwb3N0O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKGlwaG9uZXxpcG9kfGlwYWQpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcblxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5saW5rYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubGlua1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2xpbmsnKSB9LCB7XG4gIGxpbms6IGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH1cbn0pO1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXMoU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRmZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xudmFyIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5O1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IGluc3BlY3RTb3VyY2UoUHJvbWlzZUNvbnN0cnVjdG9yKSAhPT0gU3RyaW5nKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIGlmICghR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSkge1xuICAgIC8vIFY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgIGlmIChWOF9WRVJTSU9OID09PSA2NikgcmV0dXJuIHRydWU7XG4gICAgLy8gVW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIGlmICghSVNfTk9ERSAmJiB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ICE9ICdmdW5jdGlvbicpIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIFdlIG5lZWQgUHJvbWlzZSNmaW5hbGx5IGluIHRoZSBwdXJlIHZlcnNpb24gZm9yIHByZXZlbnRpbmcgcHJvdG90eXBlIHBvbGx1dGlvblxuICBpZiAoSVNfUFVSRSAmJiAhUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZVsnZmluYWxseSddKSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgY2FuJ3QgdXNlIEBAc3BlY2llcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbiAgaWYgKFY4X1ZFUlNJT04gPj0gNTEgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFByb21pc2VDb25zdHJ1Y3RvcikpIHJldHVybiBmYWxzZTtcbiAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlQ29uc3RydWN0b3IucmVzb2x2ZSgxKTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICByZXR1cm4gIShwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlKTtcbn0pO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9IEZPUkNFRCB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBQcm9taXNlQ29uc3RydWN0b3IuYWxsKGl0ZXJhYmxlKVsnY2F0Y2gnXShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBzdGF0ZS5yZWFjdGlvbnM7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IGNoYWluW2luZGV4KytdO1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgICAgICAgICAgIHN0YXRlLnJlamVjdGlvbiA9IEhBTkRMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGUucmVhY3Rpb25zID0gW107XG4gICAgc3RhdGUubm90aWZpZWQgPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXN0YXRlLnJlamVjdGlvbikgb25VbmhhbmRsZWQocHJvbWlzZSwgc3RhdGUpO1xuICB9KTtcbn07XG5cbnZhciBkaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKG5hbWUsIHByb21pc2UsIHJlYXNvbikge1xuICB2YXIgZXZlbnQsIGhhbmRsZXI7XG4gIGlmIChESVNQQVRDSF9FVkVOVCkge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQucHJvbWlzZSA9IHByb21pc2U7XG4gICAgZXZlbnQucmVhc29uID0gcmVhc29uO1xuICAgIGV2ZW50LmluaXRFdmVudChuYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZ2xvYmFsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9IGVsc2UgZXZlbnQgPSB7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcmVhc29uIH07XG4gIGlmIChoYW5kbGVyID0gZ2xvYmFsWydvbicgKyBuYW1lXSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiAgfSk7XG59O1xuXG52YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgcHJvbWlzZSwgc3RhdGUsIHVud3JhcCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm4ocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApO1xuICB9O1xufTtcblxudmFyIGludGVybmFsUmVqZWN0ID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgc3RhdGUuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgbm90aWZ5KHByb21pc2UsIHN0YXRlLCB0cnVlKTtcbn07XG5cbnZhciBpbnRlcm5hbFJlc29sdmUgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlc29sdmUsIHByb21pc2UsIHdyYXBwZXIsIHN0YXRlKSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZWplY3QsIHByb21pc2UsIHdyYXBwZXIsIHN0YXRlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgd3JhcHBlciwgZXJyb3IsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBzdGF0ZS5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbnRlcm5hbFJlamVjdChwcm9taXNlLCB7IGRvbmU6IGZhbHNlIH0sIGVycm9yLCBzdGF0ZSk7XG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoRk9SQ0VEKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB0aGlzLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHRoaXMsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHRoaXMsIHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICB0eXBlOiBQUk9NSVNFLFxuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICBub3RpZmllZDogZmFsc2UsXG4gICAgICBwYXJlbnQ6IGZhbHNlLFxuICAgICAgcmVhY3Rpb25zOiBbXSxcbiAgICAgIHJlamVjdGlvbjogZmFsc2UsXG4gICAgICBzdGF0ZTogUEVORElORyxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICAgICBzdGF0ZS5yZWFjdGlvbnMucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgIT0gUEVORElORykgbm90aWZ5KHRoaXMsIHN0YXRlLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS5jYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2UucHJvdG90eXBlLnRoZW47XG5cbiAgICAvLyB3cmFwIG5hdGl2ZSBQcm9taXNlI3RoZW4gZm9yIG5hdGl2ZSBhc3luYyBmdW5jdGlvbnNcbiAgICByZWRlZmluZShOYXRpdmVQcm9taXNlLnByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG5hdGl2ZVRoZW4uY2FsbCh0aGF0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xuXG4gICAgLy8gd3JhcCBmZXRjaCByZXN1bHRcbiAgICBpZiAodHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nKSAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShQcm9taXNlQ29uc3RydWN0b3IsICRmZXRjaC5hcHBseShnbG9iYWwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IGdldEJ1aWx0SW4oUFJPTUlTRSk7XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoSVNfUFVSRSAmJiB0aGlzID09PSBQcm9taXNlV3JhcHBlciA/IFByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgLy8gYFByb21pc2UuYWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIGBQcm9taXNlLnJhY2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCAnICsgKG5hbWUgPyBuYW1lICsgJyAnIDogJycpICsgJ2ludm9jYXRpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxudmFyIGl0ZXJhdGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZm4sIHRoYXQsIEFTX0VOVFJJRVMsIElTX0lURVJBVE9SKSB7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChmbiwgdGhhdCwgQVNfRU5UUklFUyA/IDIgOiAxKTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IEFTX0VOVFJJRVNcbiAgICAgICAgICA/IGJvdW5kRnVuY3Rpb24oYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pXG4gICAgICAgICAgOiBib3VuZEZ1bmN0aW9uKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpO1xuICB9XG5cbiAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgcmVzdWx0ID0gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgYm91bmRGdW5jdGlvbiwgc3RlcC52YWx1ZSwgQVNfRU5UUklFUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuXG5pdGVyYXRlLnN0b3AgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIHJlc3VsdCk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgSVNfTk9ERSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoTXV0YXRpb25PYnNlcnZlciAmJiAhSVNfSU9TKSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICB0aGVuID0gcHJvbWlzZS50aGVuO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4uY2FsbChwcm9taXNlLCBmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgcXVvdCA9IC9cIi9nO1xuXG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWh0bWxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBjaGVjayB0aGUgZXhpc3RlbmNlIG9mIGEgbWV0aG9kLCBsb3dlcmNhc2Vcbi8vIG9mIGEgdGFnIGFuZCBlc2NhcGluZyBxdW90ZXMgaW4gYXJndW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTUVUSE9EX05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGl0KSBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgIE9bSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhPLCBISURERU4pICYmIE9bSElEREVOXVtrZXldKSBPW0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgQXR0cmlidXRlcyA9IG5hdGl2ZU9iamVjdENyZWF0ZShBdHRyaWJ1dGVzLCB7IGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpO1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBrZXksIEF0dHJpYnV0ZXMpO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgJGZvckVhY2goa2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghREVTQ1JJUFRPUlMgfHwgJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9QcmltaXRpdmUoViwgdHJ1ZSk7XG4gIHZhciBlbnVtZXJhYmxlID0gbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywgUCkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzKHRoaXMsIFApIHx8ICFoYXMoQWxsU3ltYm9scywgUCkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdID8gZW51bWVyYWJsZSA6IHRydWU7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhoaWRkZW5LZXlzLCBrZXkpKSByZXN1bHQucHVzaChrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pIHtcbiAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoSVNfT0JKRUNUX1BST1RPVFlQRSA/IE9iamVjdFByb3RvdHlwZVN5bWJvbHMgOiB0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXMoT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgc2V0dGVyLmNhbGwoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICByZWRlZmluZSgkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhrZXkpO1xuICAgIGlmIChoYXMoU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhcyhTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eXN5bWJvbHNcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSkgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2QgYmVoYXZpb3Igd2l0aCBzeW1ib2xzXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpO1xuICAgIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gICAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG4gIH0pO1xuXG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfSlNPTl9TVFJJTkdJRlkgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICAgIHZhciBpbmRleCA9IDE7XG4gICAgICB2YXIgJHJlcGxhY2VyO1xuICAgICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpbmRleCkgYXJncy5wdXNoKGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgICAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICByZXR1cm4gJHN0cmluZ2lmeS5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0pIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG59XG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJ1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcblxuaWYgKERFU0NSSVBUT1JTICYmIHR5cGVvZiBOYXRpdmVTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAoISgnZGVzY3JpcHRpb24nIGluIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcyBpbnN0YW5jZW9mIFN5bWJvbFdyYXBwZXJcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpO1xuICB2YXIgc3ltYm9sUHJvdG90eXBlID0gU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wucHJvdG90eXBlO1xuICBzeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG5hdGl2ZSA9IFN0cmluZyhOYXRpdmVTeW1ib2woJ3Rlc3QnKSkgPT0gJ1N5bWJvbCh0ZXN0KSc7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICBkZWZpbmVQcm9wZXJ0eShzeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBpc09iamVjdCh0aGlzKSA/IHRoaXMudmFsdWVPZigpIDogdGhpcztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZy5jYWxsKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBuYXRpdmUgPyBzdHJpbmcuc2xpY2UoNywgLTEpIDogc3RyaW5nLnJlcGxhY2UocmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKE8pO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IG5ldyBDKCk7XG4gICAgZm9yICg7IShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7XG4gICAgc2V0dGVyLmNhbGwodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIuY2FsbChPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnc2xpY2UnLCB7IEFDQ0VTU09SUzogdHJ1ZSwgMDogMCwgMTogMiB9KTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBuYXRpdmVTbGljZSA9IFtdLnNsaWNlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAodHlwZW9mIENvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU2xpY2UuY2FsbChPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyBBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNhY2hlID0ge307XG5cbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKGl0KSB7IHRocm93IGl0OyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgb3B0aW9ucykge1xuICBpZiAoaGFzKGNhY2hlLCBNRVRIT0RfTkFNRSkpIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV07XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICB2YXIgQUNDRVNTT1JTID0gaGFzKG9wdGlvbnMsICdBQ0NFU1NPUlMnKSA/IG9wdGlvbnMuQUNDRVNTT1JTIDogZmFsc2U7XG4gIHZhciBhcmd1bWVudDAgPSBoYXMob3B0aW9ucywgMCkgPyBvcHRpb25zWzBdIDogdGhyb3dlcjtcbiAgdmFyIGFyZ3VtZW50MSA9IGhhcyhvcHRpb25zLCAxKSA/IG9wdGlvbnNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXSA9ICEhbWV0aG9kICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKEFDQ0VTU09SUyAmJiAhREVTQ1JJUFRPUlMpIHJldHVybiB0cnVlO1xuICAgIHZhciBPID0geyBsZW5ndGg6IC0xIH07XG5cbiAgICBpZiAoQUNDRVNTT1JTKSBkZWZpbmVQcm9wZXJ0eShPLCAxLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogdGhyb3dlciB9KTtcbiAgICBlbHNlIE9bMV0gPSAxO1xuXG4gICAgbWV0aG9kLmNhbGwoTywgYXJndW1lbnQwLCBhcmd1bWVudDEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG5hdGl2ZVRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbnZhciBJTkNPUlJFQ1RfTkFNRSA9IG5hdGl2ZVRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoTk9UX0dFTkVSSUMgfHwgSU5DT1JSRUNUX05BTUUpIHtcbiAgcmVkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwID0gU3RyaW5nKFIuc291cmNlKTtcbiAgICB2YXIgcmYgPSBSLmZsYWdzO1xuICAgIHZhciBmID0gU3RyaW5nKHJmID09PSB1bmRlZmluZWQgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCAmJiAhKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlKSA/IGZsYWdzLmNhbGwoUikgOiByZik7XG4gICAgcmV0dXJuICcvJyArIHAgKyAnLycgKyBmO1xuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCJleHBvcnQgY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3Rvcih7XHJcbiAgICBiYXNlVXJsLFxyXG4gICAgaGVhZGVyc1xyXG4gIH0pIHtcclxuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XHJcbiAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKHRoaXMuYmFzZVVybCArIGAvY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyc1xyXG4gICAgfSlcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQndC1INGD0LTQsNC70L7RgdGMINC/0L7Qu9GD0YfQuNGC0Ywg0LTQsNC90L3Ri9C1LiDQntGI0LjQsdC60LA6JHtyZXMuc3RhdHVzfWApO1xyXG4gICAgICB9KVxyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm9Gcm9tU2VydmVyKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKHRoaXMuYmFzZVVybCArIGAvdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyc1xyXG4gICAgfSlcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQndC1INGD0LTQsNC70L7RgdGMINC/0L7Qu9GD0YfQuNGC0Ywg0LTQsNC90L3Ri9C1LiDQntGI0LjQsdC60LA6JHtyZXMuc3RhdHVzfWApO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVXNlckluZm9BcGkobmFtZSwgYWJvdXQsIGF2YXRhcikge1xyXG4gICAgcmV0dXJuIGZldGNoKHRoaXMuYmFzZVVybCArIGAvdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BBVENIJyxcclxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBhYm91dDogYWJvdXQsXHJcbiAgICAgICAgYXZhdGFyOiBhdmF0YXIsXHJcbiAgICAgIH0pLFxyXG4gICAgfSlcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQndC1INGD0LTQsNC70L7RgdGMINC/0L7Qu9GD0YfQuNGC0Ywg0LTQsNC90L3Ri9C1LiDQntGI0LjQsdC60LA6JHtyZXMuc3RhdHVzfWApO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IobGluaywgbmFtZSkge1xyXG4gICAgdGhpcy5saW5rID0gbGluaztcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgfVxyXG5cclxuICBsaWtlKGV2ZW50KSB7XHJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncGxhY2UtY2FyZF9fbGlrZS1pY29uJykpIHtcclxuICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ3BsYWNlLWNhcmRfX2xpa2UtaWNvbl9saWtlZCcpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgcmVtb3ZlKGV2ZW50KSB7XHJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5wbGFjZS1jYXJkX19kZWxldGUtaWNvbicpKSB7XHJcbiAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5wbGFjZS1jYXJkJyk7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZXMtbGlzdCcpLnJlbW92ZUNoaWxkKGNhcmRFbGVtZW50KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNyZWF0ZShsaW5rVmFsdWUsIG5hbWVWYWx1ZSkge1xyXG4gICAgLyogINCc0L7QttC90L4g0LvRg9GH0YjQtTpcclxuICAgICogINCQ0LvRjNGC0LXRgNC90LDRgtC40LLQvdGL0Lkg0YHQv9C+0YHQvtCxINGB0L7Qt9C00LDQvdC40Y8g0LrQsNGA0YLQvtGH0LrQuC4g0J/RgNC4INC90LXQvCDQvdC1INGC0YDQtdCx0YPQtdGC0YHRjyDRgdC+0LfQtNCw0LLQsNGC0Ywg0LLRgNGD0YfQvdGD0Y4g0LLRgdC1XHJcbiAgICAqINCS0Ysg0LzQvtC20LXRgtC1INGA0LXQsNC70LjQt9C+0LLQsNGC0Ywg0YTRg9C90LrRhtC40Y4sINC60L7RgtC+0YDQsNGPINGB0YDQsNC30YMg0LbQtSDQstC+0LfQstGA0LDRidCw0LXRgiDigJzQutGD0YHQvtC64oCdINGA0LDQt9C80LXRgtC60LguINCt0YLQviDRgNC10YjQsNC10YIg0L/RgNC+0LHQu9C10LzRgyDQv9C+0YHRgtC+0Y/QvdC90L7Qs9C+IGNyZWF0ZUVsZW1lbnQgRE9NLdGN0LvQtdC80LXQvdGC0L7Qsi5cclxuICAgICBmdW5jdGlvbiBnZXRUZW1wbGF0ZShkYXRhKXtcclxuICAgICAgIGNvbnN0IHRlbXBsYXRlID0gYDxkaXYgY2xhc3M9XCJwbGFjZS1jYXJkXCI+XHJcbiAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGxhY2UtY2FyZF9faW1hZ2VcIiBzdHlsZT1cImJhY2tncm91bmQ6IHVybCgke2RhdGEubGlua30pXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwbGFjZS1jYXJkX19kZWxldGUtaWNvblwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGxhY2UtY2FyZF9fZGVzY3JpcHRpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwicGxhY2UtY2FyZF9fbmFtZVwiPiR7ZGF0YS5uYW1lfTwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwbGFjZS1jYXJkX19saWtlLWljb25cIj48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgIDwvZGl2PmBcclxuICAgICByZXR1cm4gdGVtcGxhdGU7XHJcbiAgICAgfVxyXG4gICAgKiAg0K3RgtC+0YIg0LrRg9GB0L7QuiDRgNCw0LfQvNC10YLQutC4INCyINC00LDQu9GM0L3QtdC50YjQtdC8INC80L7QttC90L4g0LLRgdGC0LDQstC40YLRjCDQsiBET00sINCy0L7RgdC/0L7Qu9GM0LfQvtCy0LDQstGI0LjRgdGMINC80LXRgtC+0LTQvtC8IGluc2VydEFkamFjZW50SFRNTCgpLlxyXG4gICAgKiAgaHR0cHM6IC8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL3J1L2RvY3MvV2ViL0FQSS9FbGVtZW50L2luc2VydEFkamFjZW50SFRNTFxyXG4gICAgKiAgICBwb2ludEVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsIGdldFRlbXBsYXRlKGRhdGEpKTtcclxuICAgICovXHJcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29uc3QgaW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb25zdCBkZWxldGVJY29uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgY29uc3QgZGVzY3JpcHRpb25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb25zdCBuYW1lRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XHJcbiAgICBjb25zdCBsaWtlSWNvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuXHJcbiAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwbGFjZS1jYXJkJyk7XHJcbiAgICBpbWFnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncGxhY2UtY2FyZF9faW1hZ2UnKTtcclxuICAgIGltYWdlRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAndXJsKCcgKyBsaW5rVmFsdWUgKyAnKSc7XHJcbiAgICBkZWxldGVJY29uRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwbGFjZS1jYXJkX19kZWxldGUtaWNvbicpO1xyXG4gICAgZGVzY3JpcHRpb25FbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3BsYWNlLWNhcmRfX2Rlc2NyaXB0aW9uJyk7XHJcbiAgICBuYW1lRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwbGFjZS1jYXJkX19uYW1lJyk7XHJcbiAgICBuYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWVWYWx1ZTtcclxuICAgIGxpa2VJY29uRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwbGFjZS1jYXJkX19saWtlLWljb24nKTtcclxuXHJcbiAgICBjb25zdCBwbGFjZXNMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYWNlcy1saXN0Jyk7XHJcbiAgICBwbGFjZXNMaXN0LmFwcGVuZENoaWxkKGNhcmRFbGVtZW50KTtcclxuICAgIGNhcmRFbGVtZW50LmFwcGVuZENoaWxkKGltYWdlRWxlbWVudCk7XHJcbiAgICBjYXJkRWxlbWVudC5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbkVsZW1lbnQpO1xyXG4gICAgaW1hZ2VFbGVtZW50LmFwcGVuZENoaWxkKGRlbGV0ZUljb25FbGVtZW50KTtcclxuICAgIGRlc2NyaXB0aW9uRWxlbWVudC5hcHBlbmRDaGlsZChuYW1lRWxlbWVudCk7XHJcbiAgICBkZXNjcmlwdGlvbkVsZW1lbnQuYXBwZW5kQ2hpbGQobGlrZUljb25FbGVtZW50KTtcclxuXHJcblxyXG4gICAgY2FyZEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5JbWFnZS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBvcGVuSW1hZ2UoZXZlbnQpIHtcclxuXHJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncGxhY2UtY2FyZF9faW1hZ2UnKSkge1xyXG4gICAgICBjb25zdCBpbWFnZVBhdGggPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdzdHlsZScpO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX3Bob3RvJykuY2xhc3NMaXN0LmFkZCgncG9wdXBfaXMtb3BlbmVkJyk7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY29udGVudC1waG90bycpLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBpbWFnZVBhdGgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xvc2VJbWFnZSgpIHtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fcGhvdG8nKS5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9pcy1vcGVuZWQnKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY29udGVudC1waG90bycpLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnLCB0aGlzLmltYWdlUGF0aCk7XHJcblxyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgQ2FyZExpc3Qge1xyXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgY2FyZCwgYWRkRm9ybSwgYXBpLCB1c2VySW5mbykge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLmNhcmQgPSBjYXJkO1xyXG4gICAgdGhpcy5hZGRGb3JtID0gYWRkRm9ybTtcclxuICAgIHRoaXMuYXBpID0gYXBpO1xyXG4gICAgdGhpcy51c2VySW5mbyA9IHVzZXJJbmZvO1xyXG4gICAgLy90aGlzLmNhcmRzID0gW107XHJcbiAgfVxyXG5cclxuICBhZGRDYXJkKCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGxpbmtWYWx1ZSA9IHRoaXMuYWRkRm9ybS5lbGVtZW50cy5saW5rLnZhbHVlO1xyXG4gICAgY29uc3QgbmFtZVZhbHVlID0gdGhpcy5hZGRGb3JtLmVsZW1lbnRzLm5hbWUudmFsdWU7XHJcbiAgICB0aGlzLmNhcmRFbGVtZW50ID0gdGhpcy5jYXJkLmNyZWF0ZShsaW5rVmFsdWUsIG5hbWVWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoZGF0YSkge1xyXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkYXRhKSB7XHJcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgIGxldCBuYW1lVmFsdWUgPSB2YWx1ZS5uYW1lO1xyXG4gICAgICBsZXQgbGlua1ZhbHVlID0gdmFsdWUubGluaztcclxuICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSB0aGlzLmNhcmQuY3JlYXRlKGxpbmtWYWx1ZSwgbmFtZVZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IocG9wdXApIHtcclxuICAgICAgICB0aGlzLnBvcHVwID0gcG9wdXA7XHJcbiAgICB9XHJcbiAgICBjaGVja0lucHV0VmFsaWRpdHkoaW5wdXQsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChpbnB1dC52YWxpZGl0eS50b29TaG9ydCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlLnRleHRDb250ZW50ID0gXCLQlNC+0LvQttC90L4g0LHRi9GC0Ywg0L7RgiAyINC00L4gMzAg0YHQuNC80LLQvtC70L7QslwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkudmFsdWVNaXNzaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2UudGV4dENvbnRlbnQgPSBcItCt0YLQviDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdC+0LUg0L/QvtC70LVcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlLnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgIH1cclxuICAgIHNldFN1Ym1pdEJ1dHRvblN0YXRlKGZvcm0sIGJ1dHRvbikge1xyXG4gICAgICAgIGlmICghZm9ybS5jaGVja1ZhbGlkaXR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSlcclxuXHJcbiAgICB9XHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLmZvcm0gPSB0aGlzLnBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybScpO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fYnV0dG9uJyk7XHJcbiAgICAgICAgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tJbnB1dFZhbGlkaXR5KGV2ZW50LnRhcmdldCwgZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJ2RpdicpLnF1ZXJ5U2VsZWN0b3IoJy5lcnJvci1tZXNzYWdlJykpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFN1Ym1pdEJ1dHRvblN0YXRlKHRoaXMuZm9ybSwgdGhpcy5idXR0b24pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5zZXRTdWJtaXRCdXR0b25TdGF0ZSh0aGlzLmZvcm0sIHRoaXMuYnV0dG9uKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXApIHtcclxuICAgICAgdGhpcy5wb3B1cCA9IHBvcHVwO1xyXG4gICAgfVxyXG4gICAgb3BlbigpIHtcclxuICAgICAgdGhpcy5wb3B1cC5jbGFzc0xpc3QuYWRkKCdwb3B1cF9pcy1vcGVuZWQnKTtcclxuICAgIH1cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICB0aGlzLnBvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX2lzLW9wZW5lZCcpO1xyXG4gICAgfVxyXG4gIH0iLCJleHBvcnQgY2xhc3MgVXNlckluZm8ge1xyXG4gICAgY29uc3RydWN0b3IoZm9ybSwgdXNlck5hbWUsIHVzZXJEYXRhLCBhdmF0YXIsIGFwaSkge1xyXG4gICAgICB0aGlzLmZvcm0gPSBmb3JtO1xyXG4gICAgICB0aGlzLnVzZXJOYW1lID0gdXNlck5hbWU7XHJcbiAgICAgIHRoaXMudXNlckRhdGEgPSB1c2VyRGF0YTtcclxuICAgICAgdGhpcy5hdmF0YXIgPSBhdmF0YXI7XHJcbiAgICAgIHRoaXMuYXBpID0gYXBpO1xyXG4gICAgfVxyXG5cclxuICAgIHVzZXJJbmZvTG9hZCgpIHtcclxuICAgICAgdGhpcy5hcGkuZ2V0VXNlckluZm9Gcm9tU2VydmVyKClcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJOYW1lLnRleHRDb250ZW50PSByZXMubmFtZTtcclxuICAgICAgICAgICAgdGhpcy51c2VyRGF0YS50ZXh0Q29udGVudD0gcmVzLmFib3V0O1xyXG4gICAgICAgICAgICB0aGlzLmF2YXRhci5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7cmVzLmF2YXRhcn0pYDtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgY29uc29sZS5sb2coYNCe0YjQuNCx0LrQsCDQsiB1c2VySW5mb0xvYWQ6ICR7ZXJyfWApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHNldFVzZXJJbmZvKCkge1xyXG4gICAgdGhpcy5mb3JtLnVzZXJOYW1lLnZhbHVlID0gdGhpcy51c2VyTmFtZS50ZXh0Q29udGVudDtcclxuICAgIHRoaXMuZm9ybS51c2VyRGF0YS52YWx1ZSA9IHRoaXMudXNlckRhdGEudGV4dENvbnRlbnQ7XHJcbiBcclxuICAgfVxyXG4gICAgdXBkYXRlVXNlckluZm8oZGF0YSkge1xyXG4gICAgdGhpcy51c2VyTmFtZS50ZXh0Q29udGVudCA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMudXNlckRhdGEudGV4dENvbnRlbnQgPSBkYXRhLmFib3V0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiIsImltcG9ydCAnLi9wYWdlcy9zdHlsZS5jc3MnO1xyXG5pbXBvcnQge0FwaX0gZnJvbSAnLi9BUEknO1xyXG5pbXBvcnQge0NhcmR9IGZyb20gJy4vQ2FyZCc7XHJcbmltcG9ydCB7Q2FyZExpc3R9IGZyb20gJy4vQ2FyZExpc3QnO1xyXG5pbXBvcnQge0Zvcm1WYWxpZGF0b3J9IGZyb20gJy4vRm9ybVZhbGlkYXRvcic7XHJcbmltcG9ydCB7UG9wdXB9IGZyb20gJy4vUG9wdXAnO1xyXG5pbXBvcnQge1VzZXJJbmZvfSBmcm9tICcuL1VzZXJJbmZvJztcclxuXHJcbiAgY29uc3QgcGxhY2VzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZXMtbGlzdCcpO1xyXG4gIGNvbnN0IG9wZW5CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1pbmZvX19idXR0b24nKTtcclxuICBjb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItaW5mb19fYnV0dG9uX2VkaXQnKTtcclxuICBjb25zdCBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2xvc2UnKTtcclxuICBjb25zdCBjbG9zZUJ1dHRvbkVkaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlX2VkaXQnKTtcclxuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZm9ybXMubmV3O1xyXG4gIGNvbnN0IGVkaXRGb3JtID0gZG9jdW1lbnQuZm9ybXMuZWRpdDtcclxuICBjb25zdCBwb3B1cENsb3NlUGhvdG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlX3Bob3RvJyk7XHJcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKCk7XHJcbiAgY29uc3QgY2FyZENsb3NlSW1hZ2UgPSBuZXcgQ2FyZChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlX3Bob3RvJykpO1xyXG4gIGNvbnN0IHBvcHVwTmV3UGxhY2UgPSBuZXcgUG9wdXAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwJykpO1xyXG4gIGNvbnN0IHBvcHVwRWRpdFByb2ZpbGUgPSBuZXcgUG9wdXAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19lZGl0LXByb2ZpbGUnKSk7XHJcbiAgY29uc3QgZm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZWRpdC1wcm9maWxlJykpO1xyXG4gIGNvbnN0IGZvcm1WYWxpZGF0b3JDYXJkID0gbmV3IEZvcm1WYWxpZGF0b3IoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19lZGl0LWNhcmQnKSk7XHJcbiAgY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgICBiYXNlVXJsOiAnaHR0cHM6Ly9wcmFrdGlrdW0udGsvY29ob3J0OScsXHJcbiAgICBoZWFkZXJzOiB7XHJcbiAgICAgIGF1dGhvcml6YXRpb246ICcxYzQwZTc4Ny1kMmYxLTQ4MTItYWE5Yi03N2U2ZWYzM2UyNjknLFxyXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKFxyXG4gICAgZWRpdEZvcm0sIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51c2VyLWluZm9fX25hbWUnKSxcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51c2VyLWluZm9fX2pvYicpLFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItaW5mb19fcGhvdG8nKSxcclxuICAgIGFwaSk7XHJcblxyXG4gIGNvbnN0IGNhcmRMaXN0ID0gbmV3IENhcmRMaXN0KHBsYWNlc0xpc3QsIGNhcmQsIGZvcm0sIGFwaSwgdXNlckluZm8pO1xyXG5cclxuICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdXNlckluZm8udXNlckluZm9Mb2FkKHRoaXMudXNlck5hbWUsIHRoaXMudXNlckRhdGEsIHRoaXMuYXZhdGFyKTtcclxuICAgIGZvcm1WYWxpZGF0b3Iuc2V0RXZlbnRMaXN0ZW5lcnMoKVxyXG4gICAgZm9ybVZhbGlkYXRvckNhcmQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbiAgYXBpLmdldEluaXRpYWxDYXJkcygpXHJcbiAgICAudGhlbihkYXRhID0+IGNhcmRMaXN0LnJlbmRlcihkYXRhKSlcclxuICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhg0J7RiNC40LHQutCwOiAke2Vycn1gKTtcclxuICAgIH0pO1xyXG5cclxuICBwbGFjZXNMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FyZC5saWtlKTtcclxuXHJcbiAgcGxhY2VzTGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNhcmQucmVtb3ZlKTtcclxuXHJcbiAgZG9jdW1lbnQuZm9ybXMubmV3LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoZXZlbnQpO1xyXG4gICAgY2FyZExpc3QuYWRkQ2FyZChldmVudCk7XHJcbiAgICBwb3B1cE5ld1BsYWNlLmNsb3NlKHBvcHVwTmV3UGxhY2UpO1xyXG4gICAgZXZlbnQudGFyZ2V0LnJlc2V0KCk7XHJcbiAgfSlcclxuXHJcbiAgb3BlbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIHBvcHVwTmV3UGxhY2Uub3BlbigpO1xyXG4gIH0pO1xyXG5cclxuICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIHBvcHVwTmV3UGxhY2UuY2xvc2UoKTtcclxuICB9KTtcclxuXHJcbiAgZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIHBvcHVwRWRpdFByb2ZpbGUub3BlbigpO1xyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8oKTtcclxuICB9KTtcclxuXHJcbiAgY2xvc2VCdXR0b25FZGl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgcG9wdXBFZGl0UHJvZmlsZS5jbG9zZSgpO1xyXG4gIH0pO1xyXG5cclxuICBwb3B1cENsb3NlUGhvdG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBjYXJkQ2xvc2VJbWFnZS5jbG9zZUltYWdlKCk7XHJcbiAgfSlcclxuXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwJykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3N1Ym1pdCcgfHwgZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xyXG4gICAgICBwb3B1cE5ld1BsYWNlLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0X2Zvcm0nKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KGV2ZW50KTtcclxuICAgIGNvbnN0IHVzZXJOYW1lID0gZXZlbnQudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJyNuYW1lVmFsaWRhdGlvbicpLnZhbHVlO1xyXG4gICAgY29uc3QgdXNlckRhdGEgPSBldmVudC50YXJnZXQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dF90eXBlX2RhdGEnKS52YWx1ZTtcclxuICAgIGFwaS51cGRhdGVVc2VySW5mb0FwaSh1c2VyTmFtZSwgdXNlckRhdGEpXHJcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIHVzZXJJbmZvLnVwZGF0ZVVzZXJJbmZvKGRhdGEpO1xyXG4gICAgICAgIHBvcHVwRWRpdFByb2ZpbGUuY2xvc2UocG9wdXBFZGl0UHJvZmlsZSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDQntGI0LjQsdC60LA6ICR7ZXJyfWApO1xyXG4gICAgICB9KTtcclxuICB9KVxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=